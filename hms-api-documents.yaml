openapi: 3.0.3
info:
  title: Hospital Management System - OpenAPI 3.0
  description: |-
    Tài liệu API của Hệ thống quản lý bệnh viện (Hospital Management System)
  version: 1.0.0
servers:
  - url: https://petstore3.swagger.io/api/v3
  - url: http://localhost:8080/api/v1
tags:
  - name: staff
    description: Các API liên quan đến nhân viên
  - name: doctors
    description: Các API liên quan đến bác sĩ
  - name: nurses
    description: Các API liên quan đến y tá
  - name: supportStaff
    description: Các API liên quan đến nhân viên hỗ trợ
  - name: patients
    description: Các API liên quan đến bệnh nhân
  - name: appointments
    description: Các API liên quan đến đơn bệnh
  - name: equipment
    description: Các API liên quan đến thiết bị
  - name: drugs
    description: Các API liên quan đến thuốc
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /staff:
    get:
      tags:
        - staff
      summary: Xem thông tin nhân viên
      description: Xem thông tin tất cả các nhân viên trong bệnh viện
      operationId: getStaff
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Staff"
        "404":
          description: Staff not found
  /staff/doctors:
    get:
      tags:
        - doctors
      summary: Xem thông tin bác sĩ
      description: Xem thông tin tất cả các bác sĩ trong bệnh viện
      operationId: getDoctors
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "404":
          description: Doctors not found
    post:
      tags:
        - doctors
      summary: Thêm bác sĩ mới
      description: Thêm bác sĩ mới
      operationId: addDoctor
      requestBody:
        description: Thêm bác sĩ mới vào cơ sở dữ liệu
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddDoctor"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddDoctor"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AddDoctor"
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /staff/doctors/{doctor_id}:
    get:
      tags:
        - doctors
      summary: Xem thông tin bác sĩ
      description: Xem thông tin của 1 bác sĩ theo id
      operationId: getDoctorById
      parameters:
        - name: doctor_id
          in: path
          description: "Id của bác sĩ cần xem chi tiết. Dùng cgRXxtrmo545vI5YbAZH để test"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
            application/xml:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Invalid doctor_id supplied
        "404":
          description: Doctor not found
    put:
      tags:
        - doctors
      summary: Cập nhật thông tin của bác sĩ
      description: Cập nhật thông tin của bác sĩ
      operationId: updateDoctorById
      parameters:
        - name: doctor_id
          in: path
          description: "Id của bác sĩ cần cập nhật thông tin. Dùng cgRXxtrmo545vI5YbAZH để test"
          required: true
          schema:
            type: string
      requestBody:
        description: Cập nhật thông tin của bác sĩ
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddDoctor"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddDoctor"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AddDoctor"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid doctor_id supplied
        "404":
          description: Doctor not found
    delete:
      tags:
        - doctors
      summary: Xoá bác sĩ
      description: Xoá bác sĩ khỏi cơ sở dữ liệu
      operationId: deleteDoctorById
      parameters:
        - name: doctor_id
          in: path
          description: Id của bác sĩ cần xoá. **Tạo 1 bác sĩ mới rồi lên firebase lấy id để xoá.**
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid doctor_id
  /staff/doctors/{doctor_id}/patients:
    get:
      tags:
        - doctors
      summary: Xem bệnh nhân của bác sĩ
      description: Xem tất cả bệnh nhân của bác sĩ
      operationId: getDoctorPatients
      parameters:
        - name: doctor_id
          in: path
          description: "Id của bác sĩ cần cập nhật thông tin. Dùng cgRXxtrmo545vI5YbAZH để test"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid doctor_id
  /patients:
    get:
      tags:
        - patients
      summary: Xem thông tin của bệnh nhân
      description: Xem thông tin tất cả các bệnh nhân
      operationId: getPatients
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        "404":
          description: Patients not found
    post:
      tags:
        - patients
      summary: Thêm bệnh nhân mới
      description: Thêm bệnh nhân mới
      operationId: addPatient
      requestBody:
        description: Thêm bệnh nhân mới vào cơ sở dữ liệu
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPatient"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddPatient"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AddPatient"
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /patients/{patient_id}:
    get:
      tags:
        - patients
      summary: Xem thông tin bệnh nhân
      description: Xem thông tin của 1 bệnh nhân
      operationId: getPatientById
      parameters:
        - name: patient_id
          in: path
          description: "Id của bệnh nhân cần xem chi tiết. Dùng 0n1HhIX3QI8GmJi8qfwK để test"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
            application/xml:
              schema:
                $ref: "#/components/schemas/Patient"
        "400":
          description: Invalid patient_id supplied
        "404":
          description: Patient not found
    put:
      tags:
        - patients
      summary: Cập nhật thông tin của bệnh nhân
      description: Cập nhật thông tin của bệnh nhân
      operationId: updatePatientById
      parameters:
        - name: patient_id
          in: path
          description: "Id của bệnh nhân cần cập nhật thông tin. Dùng 0n1HhIX3QI8GmJi8qfwK để test"
          required: true
          schema:
            type: string
      requestBody:
        description: Cập nhật thông tin của bệnh nhân
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPatient"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddPatient"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AddPatient"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid patient_id supplied
        "404":
          description: Patient not found
    delete:
      tags:
        - patients
      summary: Xoá bệnh nhân
      description: Xoá bệnh nhân khỏi cơ sở dữ liệu
      operationId: deletePatientById
      parameters:
        - name: patient_id
          in: path
          description: Id của bệnh nhân cần xoá. **Tạo 1 bệnh nhân mới rồi lên firebase lấy id để xoá.**
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid patient_id
  /patients/{patient_id}/medicalRecord:
    get:
      tags:
        - patients
      summary: Xem bệnh án của bệnh nhân
      description: Xem bệnh án của 1 bệnh nhân
      operationId: getPatientMedicalRecord
      parameters:
        - name: patient_id
          in: path
          description: "Id của bệnh nhân cần xem bệnh án. Dùng 0n1HhIX3QI8GmJi8qfwK để test"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicalRecord"
            application/xml:
              schema:
                $ref: "#/components/schemas/MedicalRecord"
        "400":
          description: Invalid patient_id supplied
        "404":
          description: Patient not found
  /appointments:
    get:
      tags:
        - appointments
      summary: Xem danh sách các đơn bệnh
      description: Xem danh sách tất cả các đơn bệnh trong bệnh viện
      operationId: getAppointments
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "404":
          description: Appointments not found
    post:
      tags:
        - appointments
      summary: Tạo đơn bệnh mới
      description: Tạo đơn bệnh mới
      operationId: addAppointment
      requestBody:
        description: Thêm đơn bệnh mới vào cơ sở dữ liệu
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddAppointment"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddAppointment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AddAppointment"
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /appointments/{appointment_id}:
    get:
      tags:
        - appointments
      summary: Xem đơn bệnh theo id
      description: Xem chi tiết đơn bệnh theo id
      operationId: getAppointmentsById
      parameters:
        - name: appointment_id
          in: path
          description: "Id của đơn bệnh cần xem chi tiết. Dùng E9GsO1NBqpYw0LC0o1gM để test"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "404":
          description: Appointments not found
    put:
      tags:
        - appointments
      summary: Cập nhật đơn bệnh
      description: Cập nhật đơn bệnh
      operationId: updateAppointment
      parameters:
        - name: appointment_id
          in: path
          description: "Id của đơn bệnh cần cập nhật. Dùng E9GsO1NBqpYw0LC0o1gM để test"
          required: true
          schema:
            type: string
      requestBody:
        description: Cập nhật thông tin của đơn bệnh
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddAppointment"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddAppointment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AddAppointment"
        required: true
      responses:
        "200":
          description: Successful operation
        "404":
          description: Appointments not found
    delete:
      tags:
        - appointments
      summary: Xoá đơn bệnh
      description: Xoá đơn bệnh khỏi cơ sở dữ liệu
      operationId: deleteAppointmentById
      parameters:
        - name: appointment_id
          in: path
          description: Id của đơn bệnh cần xoá. **Tạo 1 đơn bệnh mới rồi lên firebase lấy id của nó để xoá**
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid doctor_id
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "422":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        "400":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/xml:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Staff:
      type: object
      properties:
        id:
          type: string
          example: HNC4vvn6DLES09emJQBl
        firstName:
          type: string
          example: Phuc
        lastName:
          type: string
          example: Le
        age:
          type: integer
          example: 30
        dateOfBirth:
          type: string
          format: date
          example: 05/03/2002
        gender:
          type: string
          example: male
        phoneNumber:
          type: string
          example: 0123456789
        role:
          type: string
          example: doctor
    Doctor:
      type: object
      properties:
        id:
          type: string
          example: cgRXxtrmo545vI5YbAZH
        firstName:
          type: string
          example: Phuc
        lastName:
          type: string
          example: Le
        dateOfBirth:
          type: string
          format: date
          example: 05/03/2002
        age:
          type: integer
          example: 22
        gender:
          type: string
          example: male
        phoneNumber:
          type: string
          example: "0123456789"
        salary:
          type: integer
          example: 15000000
        specialty:
          type: string
          example: Tim mạch
    AddDoctor:
      required:
        - firstName
        - lastName
        - dateOfBirth
        - age
        - gender
        - phoneNumber
        - salary
        - specialty
      type: object
      properties:
        firstName:
          type: string
          example: K
        lastName:
          type: string
          example: Nguyen
        dateOfBirth:
          type: string
          format: date
          example: 12/31/1994
        age:
          type: integer
          example: 30
        gender:
          type: string
          example: male
        phoneNumber:
          type: string
          example: "0004567891"
        salary:
          type: integer
          example: 20000000
        specialty:
          type: string
          example: Tim mạch
    Patient:
      type: object
      properties:
        id:
          type: string
          example: 0n1HhIX3QI8GmJi8qfwK
        firstName:
          type: string
          example: Thinh
        lastName:
          type: string
          example: Nguyen Thi
        age:
          type: integer
          example: 25
        gender:
          type: string
          example: male
        phoneNumber:
          type: string
          example: "6410983572"
        healthInsurance:
          type: string
          example: "true"
        doctorResponbility:
          type: string
          example: "cgRXxtrmo545vI5YbAZH"
        dateOfBirth:
          type: string
          format: date
          example: 18/04/2008
    AddPatient:
      required:
        - firstName
        - lastName
        - dateOfBirth
        - age
        - gender
        - phoneNumber
        - healthInsurance
        - doctorResponbility
      type: object
      properties:
        firstName:
          type: string
          example: A
        lastName:
          type: string
          example: Nguyen
        dateOfBirth:
          type: string
          format: date
          example: 17/5/2002
        age:
          type: integer
          example: 22
        gender:
          type: string
          example: male
        phoneNumber:
          type: string
          example: "0949777565"
        healthInsurance:
          type: integer
          example: 20000000
        doctorResponbility:
          type: string
          example: HNC4vvn6DLES09emJQBl
    MedicalRecord:
      type: object
      properties:
        id:
          type: string
          example: E9GsO1NBqpYw0LC0o1gM
        appointmentTime:
          type: string
          example: 20/06/2024
        doctor:
          type: string
          example: Chung Thinh
        result:
          type: string
          example: Sốt, nhức đầu
        roomID:
          type: string
          example: 401
    Appointment:
      type: object
      properties:
        id:
          type: string
          example: 4LfDAQ91Cw86uB0s92ko
        appointmentTime:
          type: string
          format: date-time
          example: June 12, 2024 at 11:51:32 AM
        doctorID:
          type: string
          example: JidK3G5TMD9sANQdnnIW
        patientID:
          type: string
          example: OqY0WecTEX0ti2TxNIGF
        result:
          type: string
          example: Đau dạy dày
        roomID:
          type: string
          example: 301
    AddAppointment:
      required:
        - appointmentTime
        - doctorID
        - patientID
        - result
        - roomID
      type: object
      properties:
        appointmentTime:
          type: string
          format: date-time
          example: June 20, 2024 11:51:32
        doctorID:
          type: string
          example: JidK3G5TMD9sANQdnnIW
        patientID:
          type: string
          example: OqY0WecTEX0ti2TxNIGF
        result:
          type: string
          example: Sốt, nhức đầu
        roomID:
          type: string
          example: 401
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
